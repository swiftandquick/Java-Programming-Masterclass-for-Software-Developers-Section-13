<?import javafx.geometry.Insets?>
<?import javafx.scene.layout.GridPane?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>

<!-- Set components align to top-center and the grid lines to visible.  -->
<?import javafx.scene.layout.ColumnConstraints?>
<!--GridPane fx:controller="sample.Controller"
          xmlns:fx="http://javafx.com/fxml" alignment="top_center" hgap="10" vgap="10"
          gridLinesVisible="true"-->
    <!-- <padding> sets how elements space out between each other.
    Insets set the inside offsets for the four sides of the rectangular area.  Set margin 10 units to the top -->
    <!-- padding>
        <Insets top="10"/>
    </padding-->
    <!-- Sets the each of the two columnâ€™s width equal to 50% of the applicationâ€™s screen size.  -->
    <!--columnConstraints>
        <ColumnConstraints percentWidth="50.0"/>
        <ColumnConstraints percentWidth="50.0"/>
    </columnConstraints-->
    <!-- Separate the buttons in 3 rows and 2 columns.  -->
    <!-- Set the  horizontal alignment of the child within its layout area to right.  -->
    <!-- Button text="Button One" GridPane.rowIndex="0" GridPane.columnIndex="0" GridPane.halignment="RIGHT"/>
    <Button text="Button Two" GridPane.rowIndex="0" GridPane.columnIndex="1"/>
    <Button text="Button Three" GridPane.rowIndex="1" GridPane.columnIndex="0"/-->
    <!-- Button four is in fourth row, the size of the button spans two columns.   -->
    <!--Button text="Really Long Button Four" GridPane.rowIndex="3" GridPane.columnIndex="0"
        GridPane.columnSpan="2"/>
    <Button text="Button Five" GridPane.rowIndex="2" GridPane.columnIndex="0"/-->
<!--/GridPane-->

<?import javafx.scene.layout.HBox?>

<!-- Components align to bottom right.  Set border to size 3, red, dashed.  -->
<!--HBox fx:controller="sample.Controller"
      xmlns:fx="http://javafx.com/fxml" alignment="bottom_right"
      style="-fx-border-color:red; -fx-border-width:3; -fx-border-style:dashed"-->
    <!-- Create space between components, 10 space to the botom, and 10 space to the right.  -->
    <!--padding>
        <Insets bottom="10" right="10"/>
    </padding>
    <Button text="Okay" prefWidth="90"/>
    <Button text="Cancel" prefWidth="90"/>
    <Button text="Help" prefWidth="90"/>
</HBox-->

<!-- BorderPane containing an HBox.  -->
<?import javafx.scene.layout.BorderPane?>
<!--BorderPane fx:controller="sample.Controller"
            xmlns:fx="http://javafx.com/fxml"-->
    <!-- The top of the BorderPane contains a Label.  -->
    <!--top -->
        <!-- Set the component to the center of the top part of the BorderPane.  -->
        <!-- Label text="This label is in the top position" alignment="center" BorderPane.alignment="center"
            style="-fx-border-color:blue; -fx-border-width:3; -fx-border-style:dashed"/-->
    <!-- /top-->
    <!-- I can use <center>, <left>, and <right> to decide what components go in what part of BorderPane.  -->
    <!-- center>
        <Label text="This label is in thecenter position and has really loooooooooooooooooooooooooooong text.  "/>
    </center>
    <left>
        <Label text="This label is in the left position.  " alignment="center"/>
    </left>
    <right>
        <Label text="This label is in the right position.  "/>
    </right-->
    <!-- Set HBox alignment to bottom in BorderPane, set spacing between components within HBox to 10.  -->
    <!--bottom -->
        <!-- HBox is in bottom-right of the bottom part of the BorderPane.  -->
        <!--HBox spacing="10" alignment="bottom_right">
            <padding>
                <Insets bottom="10" right="10"/>
            </padding>
            <Button text="Okay" prefWidth="90"/>
            <Button text="Cancel" prefWidth="90"/>
            <Button text="Help" prefWidth="90"/>
        </HBox>
    </bottom>
</BorderPane -->

<?import javafx.scene.layout.FlowPane?>
<!-- Align elements vertically.  If elements don't fit the height, elements move onto next column.  -->
<!--FlowPane fx:controller="sample.Controller"
          xmlns:fx="http:javafx.com/fxml" orientation="VERTICAL">
    <Button text="Button One"/>
    <Button text="Button Two"/>
    <Button text="Button Three"/>
    <Button text="Button Four"/>
    <Button text="Button Five"/>
    <Button text="Button Six"/>
    <Button text="Button Seven"/>
    <Button text="Button Eight"/>
    <Button text="Button Nine"/>
    <Button text="Button Ten"/>
</FlowPane-->

<?import javafx.scene.layout.VBox?>
<!-- Align elements vertically.  Elements don't mvoe onto next column if they don't fit the height.  -->
<!--VBox fx:controller="sample.Controller"
      xmlns:fx="http:javafx.com/fxml">
    <Button text="Button One"/>
    <Button text="Button Two"/>
    <Button text="Button Three"/>
    <Button text="Button Four"/>
    <Button text="Button Five"/>
    <Button text="Button Six"/>
    <Button text="Button Seven"/>
    <Button text="Button Eight"/>
    <Button text="Button Nine"/>
    <Button text="Button Ten"/>
</VBox-->

<?import javafx.scene.layout.TilePane?>
<!-- Organize elements in rows or columns.  -->
<!-- TilePane fx:controller="sample.Controller"
          xmlns:fx="http:javafx.com/fxml">
    <Button text="Button One"/>
    <Button text="Button Two"/>
    <Button text="Button Three"/>
    <Button text="Button Four"/>
    <Button text="Button Five"/>
    <Button text="Button Six"/>
    <Button text="Button Seven"/>
    <Button text="Button Eight"/>
    <Button text="Button Nine"/>
    <Button text="Button Ten"/>
</TilePane-->

<?import javafx.scene.layout.StackPane?>
<StackPane fx:controller="sample.Controller"
           xmlns:fx="http:javafx.com/fxml">
    <Button text="Button One" style="-fx-background-color:green"/>
    <Label text="The Label Text" style="-fx-background-color:red"/>
    <Label text="The Second Label Text" style="-fx-background-color:blue"/>
</StackPane>